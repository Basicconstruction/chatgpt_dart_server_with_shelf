计费工作流: 设计为同时支持1000个用户（临时请求秘钥）
用户登陆成功时,根据用户信息（或者不依据）产生一个与用户信息关联的计费临时请求秘钥。
有一个 临时请求秘钥哈希表，哈希表为 <String,int>类型
临时请求秘钥 -- 临时可用的token数,比如10 0000。
如何放入可用的token数，首先根据初始表初始获得默认一个临时请求秘钥可请求的token数目。临时可用的token数
 = Min(账户可用token数，设置的临时请求token数）。
每当openai返回一个请求,哈希表就会根据请求中的token消耗数削减哈希表中对应密钥的可用token数。
当服务端向openai发送数据时，会先根据哈希表查询该秘钥对应的可用token数。
请求时填入的"max_tokens" = Min(设置的请求的默认最大token,临时秘钥可用token)
（可接受的计费异常,临时秘钥可用token小于promt要消耗的token）。
当发现token等于0，或小于100（可忽略的剩余token,可接受的缺陷)

同时还有一个 用户id-临时秘钥的哈希表/Map

日志与恢复
用户每次请求成功，将向异步的日志文件管理类传输数据。日志文件管理器将在接收到关闭信号时，把日志写入到
文件中，并向 数据库管理类传输数据,说明存储了哪些日志文件。
秘钥-用户表 时间（定时更新）
日志基本信息: 时间 用户 秘钥 token消耗


同步与恢复
管理员终止服务器运行，并将缓存中的数据同步到数据库中。
同步异常： 生成sql脚本，管理员执行脚本来进行手动同步
505 系统正在维护中